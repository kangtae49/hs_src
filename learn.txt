# prompt 변경
Prelude> :set prompt "ghci> "
ghci>

# 간단한 셈
ghci> 2 + 15  
17  
ghci> 49 * 100  
4900  
ghci> 1892 - 1472  
420  
ghci> 5 / 2  
2.5  
ghci>  

# ()괄호를 사용한 우선순위 변경
ghci> (50 * 100) - 4999  
1  
ghci> 50 * 100 - 4999  
1  
ghci> 50 * (100 - 4999)  
-244950  

# 음수는  ()로 감싸야함.
5 * (-3)

# boolean
ghci> True && False  
False  
ghci> True && True  
True  
ghci> False || True  
True   
ghci> not False  
True  
ghci> not (True && True)  
False  

# 비교
# 같은 type만 비교가됨
ghci> 5 == 5  
True  
ghci> 1 == 0  
False  
ghci> 5 /= 5  
False  
ghci> 5 /= 4  
True  
ghci> "hello" == "hello"  
True  

# *(곱하기)는 두수를 곱하는 function이다. 두 수 사이에 샌드위치 되어 있는 이런
# 함수를 infix function 이라 한다.
# 대부분의 function은 prefix function 이다.
# function의 parameters 는 space 로 구분한다.
ghci> succ 8  
9   
ghci> min 9 10  
9  
ghci> min 3.4 3.2  
3.2  
ghci> max 100 101  
101   

# function 은 가장 높은 우선순위를 가진다.
ghci> succ 9 + max 5 4 + 1  
16  
ghci> (succ 9) + (max 5 4) + 1  
16  

# 두개의 parameters 를 갖는 function 은 infix function 으로 호출 할 수있으며,
# backtick(`)을 사용하여야 한다.
ghci> div 92 10
9
92 `div` 10
9

# baby.hs script
doubleMe x = x + x
doubleUs x y = x*2 + y*2
# or 
doubleUs x y = doubleMe x + doubleMe y


# script file loading 
ghci> :l baby  
[1 of 1] Compiling Main             ( baby.hs, interpreted )  
Ok, modules loaded: Main.  
ghci> doubleMe 9  
18  
ghci> doubleMe 8.3  
16.6   

# if 문을 사용할때 else 구문은 필수적으로 사용해야함.
# 그리고 function 은 return 값을 가져야만 한다.
doubleSmallNumber x = if x > 100  
                        then x  
                        else x*2

# if 문은 한줄의 expression으로 사용할 수 있다.
# 모든 expression 과 function은 값을 return 한다.

# function 이름이 '로 끝나는 것은 특별한 의미를 가지고 있지 않다.
# 약간 다른 버전의 function 임을 표시하는데 사용함.

doubleSmallNumber' x = (if x > 100 then x else x*2) + 1

# function 이름은 대문자로 시작할수 없다.
# parameter를 갖지않은 function은 definition 이다.
conanO'Brien = "It's a-me, Conan O'Brien!" 

# list 는 같은 type의 원소를 저장한다.

# let keyword는 ghci 에서 name을 정의할 때 사용한다.
# ghci 에서 let a = 1은 script 에서 a = 1 과 동일하다.
ghci> let lostNumbers = [4,8,15,16,23,42]  
ghci> lostNumbers  
[4,8,15,16,23,42]  

# character 하나는 single quotes 를 사용한다.
# string은 단지 characters의 list다
# "hello" 는 ['h', 'e', 'l', 'l', 'o'] 와 같다.

# list 두개를 합할때 ++ operator 를 사용한다.
ghci> [1,2,3,4] ++ [9,10,11,12]  
[1,2,3,4,9,10,11,12]  
ghci> "hello" ++ " " ++ "world"  
"hello world"  
ghci> ['w','o'] ++ ['o','t']  
"woot"  

# 긴 string을 반복적으로 ++ 연산을 수행하는것은 경계하라.
# [1,2,3] ++ [4] 의 경우 좌측 리스트 전부에 ++ 을 수행하게 된다.
# list 의 시작에 : operator를 사용하면 즉시 수행시킬 수 있다.

ghci> 'A':" SMALL CAT"  
"A SMALL CAT"  
ghci> 5:[1,2,3,4,5]  
[5,1,2,3,4,5]  

# [1,2,3] 은 1:2:3:[] 과 같다. []는 empty list다.
# 3이 추가되면  [3]이 되고, 2가 추가되면 [2,3]이되고 이후  [1,2,3]이 된다.

# [], [[]] and[[],[],[]] 는 다른다.
# [] 는 empty list, [[]]는 하나의 empty list를 가진 list, 
# [[],[],[]] 는 3개의 empty list를 가진 list

# list의 해당 index의 값을 얻기 위해 !!를 사용한다.
ghci> "Steve Buscemi" !! 6  
'B'  
ghci> [9.4,33.2,96.2,11.2,23.25] !! 1  
33.2

# 만약 4개 elements를 가진 list에 6번째 element를 얻으려하면 error를 얻게
# 된다.

# list 는 list를 포함할수있다.
ghci> let b = [[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]  
ghci> b  
[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]  
ghci> b ++ [[1,1,1,1]]  
[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3],[1,1,1,1]]  
ghci> [6,6,6]:b  
[[6,6,6],[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]  
ghci> b !! 2  
[1,2,2,3,4] 

# list 는 비교할 수 있다.
# 차례대로 첫번째 부터 비교한다. 만약 같으면 다음 element를 비교한다.
ghci> [3,2,1] > [2,1,0]  
True  
ghci> [3,2,1] > [2,10,100]  
True  
ghci> [3,4,2] > [3,4]  
True  
ghci> [3,4,2] > [2,4]  
True  
ghci> [3,4,2] == [3,4,2]  
True  

# list 를 다루는 기본적인 functions들이 있음
# head 는 list의 첫번째 element를 return 한다.
ghci> head [5,4,3,2,1]  
5 

# tail 은 list의 head를 뺀 나머지를 return한다.
ghci> tail [5,4,3,2,1]  
[4,3,2,1]

# last 는 list의 마지막 element를 return한다.
ghci> last [5,4,3,2,1]  
1  

# init 는 마지막 element를 제외한 전부를 return 한다.
ghci> init [5,4,3,2,1]  
[5,4,3,2] 

# empty list에 head, tail, last, init을 사용하면 안됨.
ghci> head []  
*** Exception: Prelude.head: empty list

# length 는 list 의 length를 return 한다.
ghci> length [5,4,3,2,1]  
5

# null 은 list 가 empty 인지 check한다.
# null function은 xs == [] 대신 사용한다.(xs 라는 list가 있으면)
ghci> null [1,2,3]  
False  
ghci> null []  
True 

# reverse 는 list를 역순으로 return.
ghci> reverse [5,4,3,2,1]  
[1,2,3,4,5] 

# take 는 list의 시작부터 지정된 수만큼 return.
ghci> take 3 [5,4,3,2,1]  
[5,4,3]  
ghci> take 1 [3,9,3]  
[3]  
ghci> take 5 [1,2]  
[1,2]  
ghci> take 0 [6,6,6]  
[]

# drop 은 유사한 방식으로 list의 시작부터 지정된 수만큼 drop, 나머지 return.
ghci> drop 3 [8,4,2,1,5,6]  
[1,5,6]  
ghci> drop 0 [1,2,3,4]  
[1,2,3,4]  
ghci> drop 100 [1,2,3,4]  
[]  

# maximum 은 list의 element중 가장 큰것을 return.
# minimum 은 가장 작을것을 return.
ghci> minimum [8,4,2,1,5,6]  
1  
ghci> maximum [1,9,2,3,4]  
9  

# sum 은 list 의 수를 합한다.
# product 는 list의 수를 곱한다.
ghci> sum [5,2,1,6,3,2,5,7]  
31  
ghci> product [6,2,1,2]  
24  
ghci> product [1,2,5,6,7,9,2,0]  
0  

# elem 은 list에 element가 존재하는지 알려준다. 
# 이 function은 infix function 으로 호출될 수 있다
ghci> 4 `elem` [3,4,5,6]  
True  
ghci> 10 `elem` [3,4,5,6]  
False 

# 1부터 20까지 list 만들때
ghci> [1..20]  
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]  
ghci> ['a'..'z']  
"abcdefghijklmnopqrstuvwxyz"  
ghci> ['K'..'Z']  
"KLMNOPQRSTUVWXYZ" 

# 1부터 20까지 짝수를 원하면
ghci> [2,4..20]  
[2,4,6,8,10,12,14,16,18,20]  
ghci> [3,6..20]  
[3,6,9,12,15,18]   

# [1,2,4,8,16..100] 이렇게 할 수 는 없다. 앞에 2개 element만 사용가능

# 20 에서 1 까지 list를 만들기위해 [20..1] 은 안되고, [20,19..1] 을 사용

# range 안에 floating point를 사용할때 주시해라.
# 그것을 정확한 정밀도가 없다.
# list안에 그것을 사용지 않기를 충고.
ghci> [0.1, 0.3 .. 1]  
[0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999]  

# 13의 배수 list의 24개를 take 할때 [13,26..24*13] 으로 할 수있다.
# 더 좋은 방법은 take 24 [13,16..]
# 이것은 list의 무한 까지 수행하지는 않는다. Haskel 은 lazy 하게 동작한다.

# cycle 은 list를 무한 반복한다.
ghci> take 10 (cycle [1,2,3])  
[1,2,3,1,2,3,1,2,3,1]  
ghci> take 12 (cycle "LOL ")  
"LOL LOL LOL "

# repeat 는 element를 무한 반복한다.
ghci> take 10 (repeat 5)  
[5,5,5,5,5,5,5,5,5,5]  

# replicate 는 list에 같은 element를 지정된 수만큼 만든다.
ghci> replicate 3 10 
[10,10,10]

# list comprehension
# take 10 [2,4..] 는
# [x*2 | x <- [1..10]] 이렇게 표현할 수 있다.
# 좀더 복잡한 표현식도 가능하다. 수학 표현과 유사.
ghci> [x*2 | x <- [1..10]]  
[2,4,6,8,10,12,14,16,18,20] 

# 조건을 수가 할 수 있다. comma 로 구분
ghci> [x*2 | x <- [1..10], x*2 >= 12]  
[12,14,16,18,20]  

# 50 에서 100까지 수중 7로 나눈 나머지가 3인 수는?
ghci> [ x | x <- [50..100], x `mod` 7 == 3]  
[52,59,66,73,80,87,94] 

# 짝수중 10보다 작은경우 "BOOM!", 크거나 같은경우 "BANG!" 
boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x] 

ghci> boomBangs [7..13]  
["BOOM!","BOOM!","BANG!","BANG!"]   

# 여러개의 조건을 사용 할 수 있음.
ghci> [ x | x <- [10..20], x /= 13, x /= 15, x /= 19]  
[10,11,12,14,16,17,18,20]  

# 두 list의 가능한 곱
ghci> [ x*y | x <- [2,5,10], y <- [8,10,11]]  
[16,20,22,40,50,55,80,100,110]

# 그중 50보다 큰경우
ghci> [ x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50]  
[55,80,100,110] 


ghci> let nouns = ["hobo","frog","pope"]  
ghci> let adjectives = ["lazy","grouchy","scheming"]  
ghci> [adjective ++ " " ++ noun | adjective <- adjectives, noun <- nouns]  
["lazy hobo","lazy frog","lazy pope","grouchy hobo","grouchy frog",  
"grouchy pope","scheming hobo","scheming frog","scheming pope"]

# _ 는 변수를 사용하지 않는 경우 사용
length' xs = sum [1 | _ <- xs] 

# 대문자만 
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']] 

ghci> removeNonUppercase "Hahaha! Ahahaha!"  
"HA"  
ghci> removeNonUppercase "IdontLIKEFROGS"  
"ILIKEFROGS"  

# 짝수만
ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]  
ghci> [ [ x | x <- xs, even x ] | xs <- xxs]  
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]] 

# Tuples
# tuple 은 list와 비슷하다.
# list 는 [[1,2],[8,11],[4,5]] 나 [[1,2],[8,11,5],[4,5]] 이 가능하나
# tuple 는 [(1,2),(8,11,5),(4,5)] 가능하지 않음.
# 특정 사이즈를 갖는 tuple은 그자체로 type 이므로, list의 다른 length의
# tuple을 같이 사용할 수 없다.

# list 처럼 tuple 도 compare 할수 있으나 다른 사이즈의 tuple 은 compare할 수
# 없다.

# fst 는 pair 의 첫번째 component를 return.
ghci> fst (8,11)  
8  
ghci> fst ("Wow", False)  
"Wow" 

# snd 는 pair 의 두번째 것을 return.
ghci> snd (8,11)  
11  
ghci> snd ("Wow", False)  
False

# fst, snd 는 triples, 4-tuples, .. 에서 동작하지 않는다.

# zip 은 pair list 를 곱한다.
ghci> zip [1,2,3,4,5] [5,5,5,5,5]  
[(1,5),(2,5),(3,5),(4,5),(5,5)]  
ghci> zip [1 .. 5] ["one", "two", "three", "four", "five"]  
[(1,"one"),(2,"two"),(3,"three"),(4,"four"),(5,"five")]  

# zip 은 다른 type의 list를 곱할 수 있다.
ghci> zip [5,3,2,6,2,7,2,5,4,6,6] ["im","a","turtle"]  
[(5,"im"),(3,"a"),(2,"turtle")]  

# zip 은 무한 list를 사용할 수 있다.
ghci> zip [1..] ["apple", "orange", "cherry", "mango"]  
[(1,"apple"),(2,"orange"),(3,"cherry"),(4,"mango")]

# a^2 + b^2 = c^2
# 10보다 작거나 같은 정수 a,b,c의 모든 list
ghci> let triangles = [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10] ]

# 직각삼각형
ghci> let rightTriangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2] 

# 이중 3변의 길이가 24인것
ghci> let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]  
ghci> rightTriangles'  
[(6,8,10)] 




